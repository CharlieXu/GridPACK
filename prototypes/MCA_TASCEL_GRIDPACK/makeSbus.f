! --------------------- SUBROUTINE ----------------------     
      SUBROUTINE MAKESBUS
!      
!     WRITTEN BY YOUSU CHEN,PNNL, ON 3/19/2007
!     LAST MODIFIED BY YOUSU CHEN,PNNL ON 4/5/2007
!     $ID: MAKESBUS V1.02 2007/04/05
!-------------------------------------------------------
!     REVISION LOG:
!     4/5/2007
!       1. ADDED NGON TO CONSIDER GENERATOR'S STATUS
!       2. ADDED CG TO OBTAIN SBUS BY MATRIX COMPUTATION
!     6/18/2007
!       1. ADDED REDISTRIBUTE PG FOR CONTINGENCY ANALYSIS
!     2007/08/24
!     (1) ADDED G1,G2,G3 FOR N-2,N-3 CONTINGENCY ANALYSIS

!
!----------------- DESCRIPTION --------------------------
!     THIS PROGRAM BUILDS THE VECOTR OF COMPLEX BUS POWER 
!     INJECTIONS
!--------------------------------------------------------      
!
! 
      USE BUSMODULE,ONLY: NB,BASEMVA,PD,QD,SLACK
      USE GENMODULE !,ONLY: NGON,NG,GEN_STATUS,PG,QG,PGG,QGG,GBUS,PPMAX
      USE OTHERMODULE,ONLY:SBUS
      USE DEFDP
      USE FLAGS
      USE INTRIFUNS
      USE CAMODULE, ONLY:CA_IND,GENOPT,G1,G2,G3
      IMPLICIT NONE
      
!     LOCAL ARGUMENT DECLARATION
      INTEGER :: I, IND 
      INTEGER,ALLOCATABLE, DIMENSION(:) :: IROWCGT,ICOLCGT,VALCGT
      INTEGER,ALLOCATABLE, DIMENSION(:) :: IROWCG,ICOLCG,VALCG
      COMPLEX(KIND=DP),ALLOCATABLE, DIMENSION(:) :: COM1,COM2
!      
!      --- END OF DECLARATION ---
!
      
!
!    CG = SPARSE(GBUS,[1:NGON]',ONES(NGON,1),NB,NGON)
!    OBTAIN CG' FIRST, THEN FIND CG
!    THE NUMBER OF NONZERO ELEMENTS IN CG EQUALS TO IND-1
!     
!
!     ALLOCATE MEMORY TO CG'
!
      IF (ALLOCATED(IROWCGT)) DEALLOCATE(IROWCGT)
      IF (ALLOCATED(ICOLCGT)) DEALLOCATE(ICOLCGT)
      IF (ALLOCATED(VALCGT)) DEALLOCATE(VALCGT)
      ALLOCATE(IROWCGT(NGON+1),ICOLCGT(NB),VALCGT(NG),STAT=ERROR)
      IF (ERROR /=0) THEN
           PRINT *, " ------------------ ERROR ------------------------"
	   PRINT *, " PROGRAM COULD NOT ALLOCATE SPACE FOR CG' ARRAYS"
	   STOP
      END IF

      IROWCGT(1) = 1
      DO I = 1, NGON
          IROWCGT(I+1) = IROWCGT(I) + 1
          ICOLCGT(I) = GBUS(I)
          VALCGT(I) = 1
      END DO
!
!     ALLOCATE MEMORY TO CG
!
      IF (ALLOCATED(IROWCG)) DEALLOCATE(IROWCG)
      IF (ALLOCATED(ICOLCG)) DEALLOCATE(ICOLCG)
      IF (ALLOCATED(VALCG)) DEALLOCATE(VALCG)
      ALLOCATE(IROWCG(NB+1),ICOLCG(NGON),VALCG(NGON),STAT=ERROR)
      IF (ERROR /=0) THEN
           PRINT *, " ------------------ ERROR ------------------------"
	   PRINT *, " PROGRAM COULD NOT ALLOCATE SPACE FOR CG ARRAYS"
	   STOP
      END IF
!
!     OBTAIN CG
!
      CALL GETTRANSPOSEI(IROWCGT,ICOLCGT,VALCGT,NGON,NB,NGON,IROWCG,
     & ICOLCG,VALCG)
!
!     ALLOCATE MEMORY TO PGG AND QGG  ! (PG AND QG AT GENERATORS WHO ARE ON)
!
      IF (ALLOCATED(PGG)) DEALLOCATE(PGG)
      IF (ALLOCATED(QGG)) DEALLOCATE(QGG)
      IF (ALLOCATED(PPMAX)) DEALLOCATE(PPMAX)
      IF (ALLOCATED(COM1)) DEALLOCATE(COM1)
      IF (ALLOCATED(COM2)) DEALLOCATE(COM2)
      ALLOCATE(PGG(NGON),QGG(NGON),COM1(NGON),COM2(NB),PPMAX(NGON),
     & STAT=ERROR)
      IF (ERROR /=0) THEN
           PRINT *, " ------------------ ERROR ------------------------"
	   PRINT *, " PROGRAM COULD NOT ALLOCATE SPACE FOR PGG ARRAYS"
	   STOP
      END IF
!   
!     CG*(GEN(ON,PG) + J*GEN(ON,QG)
!
      IND = 0 
      DO I = 1,NG
          IF(GEN_STATUS(I) .EQ. 1) THEN
	      IND = IND + 1
	      PGG(IND) = PG(I)
	      QGG(IND) = QG(I)
	      PPMAX(IND) = PMAX(I)
	  END IF
      END DO
!
!     CONTINGENCY ANALYSIS
!     REDISTRIBUTE PG OF DROPPED GENERATOR TO REST ON GENERATOR BASED ON
!     PMAX RATIO
!
      IF (GENOPT.EQ.1) THEN
          DO I = 1,NGON
              IF (GBUS(I) .NE. SLACK) THEN
                  PGG(I) = PGG(I)
     &                     + PG(CA_IND)*PPMAX(I)/(SUM(PPMAX)-PMAXSLACK)
              END IF
          END DO
      END IF
      IF (GENOPT.EQ.2) THEN
          DO I = 1,NGON
              IF (GBUS(I) .NE. SLACK) THEN
                  PGG(I) = PGG(I)
     &                     + (PG(G1)+PG(G2))*PPMAX(I)
     &                     / (SUM(PPMAX)-PMAXSLACK)
              END IF
          END DO
      END IF
      IF (GENOPT.EQ.3) THEN
          DO I = 1,NGON
              IF (GBUS(I) .NE. SLACK) THEN
                  PGG(I) = PGG(I)
     &                     + (PG(G1)+PG(G2)+PG(G3)) * PPMAX(I)
     &                     / (SUM(PPMAX)-PMAXSLACK)
              END IF
          END DO
      END IF
 
      COM1 = DCMPLX(PGG,QGG)

      CALL IMATMULVEC(IROWCG,ICOLCG,VALCG,COM1,COM2,NB,NGON,NGON)
      
!     SBUS = (CG*(GEN(ON,PG) + J*GEN(ON,QG)-(PD+J*QD))/BASEMVA

      SBUS = COM2-DCMPLX(PD,QD)
      SBUS = SBUS/BASEMVA

      IF (ALLOCATED(IROWCGT)) DEALLOCATE(IROWCGT)
      IF (ALLOCATED(ICOLCGT)) DEALLOCATE(ICOLCGT)
      IF (ALLOCATED(VALCGT)) DEALLOCATE(VALCGT)
      IF (ALLOCATED(IROWCG)) DEALLOCATE(IROWCG)
      IF (ALLOCATED(ICOLCG)) DEALLOCATE(ICOLCG)
      IF (ALLOCATED(VALCG)) DEALLOCATE(VALCG)
      IF (ALLOCATED(COM1)) DEALLOCATE(COM1)
      IF (ALLOCATED(COM2)) DEALLOCATE(COM2)

      RETURN
      END 
            

!
!      --- SUBROUTINE IMATMULVEC ---
!
      SUBROUTINE IMATMULVEC(IROW,ICOL,A,X,R,N,M,NZ)
      !
      !      R = A * X
      !      IROW, ICOL,A : INPUT MATRIX A
      !      X :  VECTOR
      !      R : RESULT MATRIX
      !      N : THE NUMBER OF ROWS
      !      M : THE NUMBER OF COLUMNS
      !      NZ: THE NUMBER OF NON-ZERO ELEMENTS

      USE DEFDP
      IMPLICIT NONE

      ! DUMMY ARGUMENTS
      INTEGER, INTENT(IN) :: N,M,NZ
      INTEGER, INTENT(IN), DIMENSION(:) :: IROW(N+1),ICOL(NZ)
      INTEGER, INTENT(IN), DIMENSION(:) :: A(NZ)
      COMPLEX(KIND=DP), INTENT(IN), DIMENSION(:) :: X(M)
      COMPLEX(KIND=DP), INTENT(OUT), DIMENSION(:) :: R(N)
      ! LOCAL ARGUMENTS
      INTEGER :: I, J
      COMPLEX(KIND=DP) :: TEMP
      !
      !      --- END OF DECLARATION ---
      !
      DO I = 1, N
         TEMP = 0.0
      	 DO J = IROW(I), IROW(I + 1) - 1
	     TEMP = TEMP + A(J) * X(ICOL(J)) 
	 END DO
	 R(I) = TEMP 
      END DO 
      RETURN 
      END SUBROUTINE IMATMULVEC

      
      

